#Project Euler Question 12

#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

#Let us list the factors of the first seven triangle numbers:

#1: 1
#3: 1,3
#6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.

#What is the value of the first triangle number to have over five hundred divisors?

import math
def triangle_number_create(x):
    triangle_list = []
    for num in range(1, x):
        triangle_list.append(num)
    tri_sum = sum(triangle_list)
    return tri_sum

def triangle_number_factor(fact):
    factors = [1]
    factor = 2
    x = 2
    while fact > 0:
        tri_check = triangle_number_create(x)
        factors.append(tri_check)
        for factor in range(2,int((math.sqrt(tri_check))+1)):
            if (tri_check % factor) == 0:
                factors.append(factor)
                if len(factors) > fact:
                    return tri_check
                factor2 = int(tri_check/factor)
                factors.append(factor2)
                if len(factors) > fact:
                    return tri_check
        factors = [1]
        x += 1
    return tri_check

print (triangle_number_factor(500), "is the triangle number with over n divisors")